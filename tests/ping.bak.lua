-- title:  ping
-- author: Neil Popham
-- desc:   Platformer proof of concept
-- script: lua
-- input:  gamepad
-- saveid: ntp_ping

-- __gff__ data
local sprf={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

function mid(a,b,c) t={a,b,c} table.sort(t) return t[2] end
function sub(string,s,i) return string.sub(string,s,i) end
flr=math.floor
abs=math.abs
min=math.min
max=math.max

-- http://pico-8.wikia.com/wiki/Fget
function fget(s,i)
  if sprf[s+1]==nil then sprf[s+1]=0 end
  if i==nil then
    return math.floor(sprf[s+1])
  else
    local b=2^i
    return sprf[s+1] % (2*b) >= b
  end
end

-- http://pico-8.wikia.com/wiki/Fset
function fset(s,i,b)
  if b==nil then
    sprf[s+1]=i
  else
    local e
    if sprf[s+1]==nil then
      sprf[s+1]=0
      e=false
    else
      e=fget(s,i)
    end
    if (e and not b) or (not e and b) then 
      sprf[s+1]=sprf[s+1]+(b and 2^i or -2^i)
    end
  end
end

-- [[ SHARED CODE ]]

local screen={width=240,height=136}

-- http://pico-8.wikia.com/wiki/btn
-- local pad={left=0,right=1,up=2,down=3,btn1=4,btn2=5}

-- https://github.com/nesbox/tic-80/wiki/key-map
local pad={left=2,right=3,up=0,down=1,btn1=4,btn2=5,btn3=6,btn4=7}

local dir={left=1,right=2}
local drag={air=1,ground=0.8,gravity=0.25,wall=0.05}

function round(x) return flr(x+0.5) end

function create_camera(item,x,y)
 local c={
  target=item,
  x=item.x,
  y=item.y,
  buffer={x=32,y=16},
  min={x=8*flr(screen.width/16),y=8*flr(screen.height/16)},
  max={x=x-screen.width,y=y-screen.height,shift=2},
  tiles={width=flr(screen.width/8),height=flr(screen.height/8)},
  cell={},
  offset={}
 }
 c.map=function(self)
  self.cell.x=flr(self.x/8)
  self.cell.y=flr(self.y/8)
  self.offset.x=-(self.x%8)
  self.offset.y=-(self.y%8)
  map(
   self.cell.x,
   self.cell.y,
   self.tiles.width+1,
   self.tiles.height+1,
   self.offset.x,
   self.offset.y,
   0
  )
 end 
 c.update=function(self)
  local min_x=self.x+self.min.x-self.buffer.x
  local max_x=self.x+self.min.x+self.buffer.x
  local min_y=self.y+self.min.y-self.buffer.y
  local max_y=self.y+self.min.y+self.buffer.y
  if min_x>self.target.x then
   self.x=self.x+min(self.target.x-min_x,self.max.shift)
  end
  if max_x<self.target.x then
   self.x=self.x+min(self.target.x-max_x,self.max.shift)
  end
  if min_y>self.target.y then
   self.y=self.y+min(self.target.y-min_y,self.max.shift)
  end
  if max_y<self.target.y then
   self.y=self.y+min(self.target.y-max_y,self.max.shift)
  end
  self.x=mid(0,self.x,self.max.x)
  self.y=mid(0,self.y,self.max.y)
 end
 c.spr=function(self,sprite,x,y)
  spr(sprite,x-self.x,y-self.y,0)
 end
 return c
end

function create_item(x,y)
 local i={
  x=x,
  y=y
 }
 return i
end

function create_moveable_item(x,y,ax,ay)
 local i=create_item(x,y)
 i.dx=0
 i.dy=0
 i.min={dx=0.05,dy=0.05}
 i.max={dx=1,dy=2,slide=15}
 i.slide={tick=0}
 i.ax=ax
 i.ay=ay
 i.is={
  grounded=false,
  jumping=false,
  sliding=false,
  falling=false,
  invisible=false
 }
 i.anim={
  init=function(self,stage,face)
   -- record frame count for each stage face
   for s in pairs(self.stage) do
    for f=1,2 do
     self.stage[s].face[f].fcount=#self.stage[s].face[f].frames
    end
   end
   -- init current values
   self.current:set(stage,face)
  end,
  stage={},
  current={
   reset=function(self)
    self.frame=1
    self.tick=0
    self.loop=true
    self.transitioning=false
   end,
   set=function(self,stage,face)
    if self.stage==stage then return end
    self.reset(self)
    self.stage=stage
    self.face=face or self.face
   end
  },
  add_stage=function(self,name,ticks,loop,left,right,next)
   self.stage[name]=create_stage(ticks,loop,left,right,next)
  end
 }
 i.set_state=function(self, state)
  for s in pairs(self.is) do
   self.is[s]=false
  end
  self.is[state]=true
 end
 i.draw=function(self)
  if self.is.invisible then return end
  sprite=self.animate(self)
  p.camera:spr(sprite,self.x,self.y,0)
  if self.is.sliding then
   sprite=self.smoke:animate()
   p.camera:spr(sprite,self.x,self.y-8,0)
  end
 end
 i.animate=function(self)
  local current=self.anim.current
  local stage=self.anim.stage[current.stage]
  local face=stage.face[current.face]
  if current.loop then
   current.tick=current.tick+1
   if current.tick==stage.ticks then
    current.tick=0
    current.frame=current.frame+1
    if current.frame>face.fcount then
     if stage.next then
      current:set(stage.next)
      face=self.anim.stage[current.stage].face[current.face]
     elseif stage.loop then
      current.frame=1
     else
      current.frame=face.fcount
      current.loop=false
     end
    end
   end
  end
  return face.frames[current.frame]
 end
 i.can_move_x=function(self,flag)
  local x=self.x+round(self.dx)
  if self.dx>0 then x=x+7 end
  for _,y in pairs({self.y,self.y+7}) do
   local tx=flr(x/8)
   local ty=flr(y/8)
   tile=mget(tx,ty)
   if fget(tile,0) or (flag and fget(tile,flag)) then
    if self.is.grounded then
     self.dx=0
    else
     if fget(tile,1) then
      if self.is.sliding==false then
       self.dy=0
       self.slide.tick=self.max.slide
      end
      local face=self.dx<0 and 1 or 2
      self.anim.current.face=face
      self.smoke.anim.current.face=face
      self.anim.current:set("wall")
      self:set_state("sliding")
     end
    end
    return false
   end
  end
  if self.is.sliding then
   self.is.sliding=false
  end
  return true
 end
 i.can_move_y=function(self)
  local y=self.y+round(self.dy)
  if self.dy>0 then y=y+7 end
  for _,x in pairs({self.x,self.x+7}) do
   local tx=flr(x/8)
   local ty=flr(y/8)
   tile=mget(tx,ty)
   if fget(tile,0) then
    if self.dy>0 then
     self.y=(ty-1)*8
     if self.is.falling then
      self.btn.tick=0
     end
     self:set_state("grounded")
     self.slide.tick=0
     if not self.anim.current.transitioning then
      self.anim.current:set(round(self.dx)==0 and "still" or "walk")
     end
    else
     self.y=8+(ty*8)
     if self.is.jumping then
      self:set_state("falling")
      self.anim.current:set("jump_fall")
      self.btn.tick=self.max.btn
      self.dy=0
     end
    end
    return false
   end
  end
  return true
 end
 return i
end

function create_controllable_item(x,y,ax,ay)
 local i=create_moveable_item(x,y,ax,ay)
 i.min.btn=5
 i.max.btn=20
 i.btn={tick=0}
 i.can_jump=function(self)
  if self.is.jumping
   and self.btn.tick>0 then
   return true
  end
  if self.is.grounded then
   return true
  end
  if self.is.falling
   and self.dx~=0
   and self.slide.tick>0 then
   return true
  end
  return false
 end
 i.update=function(self)
  local face=self.anim.current.face
  local stage=self.anim.current.stage

  -- checks for direction change
  local check=function(self,stage,face)
   if face~=self.anim.current.face then
    if stage=="still" then stage="walk" end
    if stage=="jump_fall" then stage="fall" end
    if not self.anim.current.transitioning then
     self.anim.current:set(stage.."_turn")
     self.anim.current.transitioning=true
    end
   end
  end

  -- horizontal movement
  if btn(pad.left) then
   self.anim.current.face=dir.left
   check(self,stage,face)
   self.dx=self.dx-self.ax
  elseif btn(pad.right) then
   self.anim.current.face=dir.right
   check(self,stage,face)
   self.dx=self.dx+self.ax
  else
   if self.is.jumping then
    self.dx=self.dx*drag.air
   else
    self.dx=self.dx*drag.ground
    if self.is.sliding then
     self.dx=0
     self:set_state("falling")
     self.anim.current:set("fall")
    end
   end
  end
  self.dx=mid(-self.max.dx,self.dx,self.max.dx)
  if abs(self.dx)<self.min.dx then self.dx=0 end
  if self.dx~=0 then
   if self.can_move_x(self) then
    self.x=self.x+round(self.dx)
   end
  end

  -- vertical movement
  if btn(pad.btn1)
   and self.can_jump(self) then
   self.btn.tick=self.btn.tick+1
  else
   self.btn.tick=0
  end
  if self.btn.tick>=self.min.btn
   and self.btn.tick<=self.max.btn then
   self:set_state("jumping")
   self.anim.current:set("jump")
   self.dy=self.dy+self.ay
  end
  if self.is.sliding then
   self.dy=self.dy+drag.wall
  else
   self.dy=self.dy+drag.gravity
   if self.is.falling then
    self.slide.tick=max(self.slide.tick-1,0)
   elseif self.is.grounded then
    self.slide.tick=0
   end
  end
  self.dy=mid(-self.max.dy,self.dy,self.max.dy)
  if abs(self.dy)<self.min.dy then self.dy=0 end
  if self.dy~=0 then
   if self.can_move_y(self) then
    self.y=self.y+round(self.dy)
    self.is.grounded=false
    if round(self.dy)>0 then
     if self.is.sliding then
      if self.dy==self.max.dy then
       self.slide.tick=max(self.slide.tick-1,0)
      end
     else
      if self.is.jumping then
       self.anim.current:set("jump_fall")
      else
       self.anim.current:set("fall")
      end
      self:set_state("falling")
     end
    end
   end
  end

 end
 return i
end

function create_stage(ticks,loop,left,right,next)
 local s={
  ticks=ticks,
  loop=loop,
  face={{frames=left},{frames=right}},
  next=next
 }
 return s
end

function _init()
 -- player
 p=create_controllable_item(0,0,0.1,-1.75)
 p.anim:add_stage("still",1,false,{6},{12})
 p.anim:add_stage("walk",5,true,{1,2,3,4,5,6},{7,8,9,10,11,12})
 p.anim:add_stage("jump",1,false,{1},{7})
 p.anim:add_stage("fall",1,false,{32},{33})
 p.anim:add_stage("wall",1,false,{13},{28})
 p.anim:add_stage("walk_turn",5,false,{20,18,21,6},{17,18,19,12},"still")
 p.anim:add_stage("jump_turn",5,false,{25,26,27},{22,23,24},"jump")
 p.anim:add_stage("fall_turn",5,false,{25,26,27},{22,23,24},"fall")
 p.anim:add_stage("wall_turn",5,false,{29,30,31},{14,15,16},"fall")
 p.anim:add_stage("jump_fall",5,false,{2,3},{8,9},"fall")
 p.anim:init("still",dir.right)

 -- player wall slide smoke
 p.smoke=create_controllable_item(0,0,0,0)
 p.smoke.anim:add_stage("smoking",4,true,{34,35},{36,37})
 p.smoke.anim:init("smoking",dir.right)

 -- camera
 p.camera=create_camera(p,256,192)

 -- replace map placeholders
 gem_count=0
 gem_total=0
 gems={}
 local x local y
 for x=0,63 do for y=0,31 do
  local s=mget(x,y)
  if s==62 then
   gem_total=gem_total+1
   mset(x,y,0)
   local g=create_moveable_item(x*8,y*8,0,0)
   g.anim:add_stage("still",1,false,{62},{})
   g.anim:init("still",dir.left)
   g.update=function(self)
    if self.is.invisible then return end
    if p.x<self.x+7
     and p.x+8>self.x
     and p.y<self.y+7
     and p.y+8>self.y then
     self.is.invisible=true
     gem_count=gem_count+1
    end
   end
   gems[#gems+1]=g
  end
  if s==p.anim.current.frame then
   mset(x,y,0)
   p.x=x*8
   p.y=y*8
  end
 end end
 
--[[
 enemies={{64,64},{24,88},{32,16}}
 for i,enemy in pairs(enemies) do
  enemies[i]=create_moveable_item(enemy[1],enemy[2],0.2,-1.75)
  enemies[i].anim:add_stage("walk",5,true,{64,65,66,67},{64,65,66,67})
  enemies[i].anim:add_stage("walk_turn",5,false,{68,69,70},{68,69,70},"walk")
  enemies[i].anim:init("walk",dir.right)
  enemies[i].update=function(self)
   local dir=self.anim.current.face==1 and -1 or 1
   self.dx=(self.dx+(self.ax*dir))*drag.ground
   self.dx=mid(-self.max.dx,self.dx,self.max.dx)
   if abs(self.dx)<self.min.dx then self.dx=self.min.dx end
   if self.anim.current.tick%2==0 then
    if self.can_move_x(self,2) then
     self.x=round(self.x+self.dx)
    else
     self.dx=0
     self.anim.current.face=self.anim.current.face==1 and 2 or 1
     self.anim.current:set("walk_turn")
    end
   end
  end
 end 

 waters={{64,32},{72,32},{80,32}}
 for i,water in pairs(waters) do
  waters[i]=create_moveable_item(water[1],water[2],0,0)
  waters[i].anim:add_stage("still",5,true,{44,45,46,47},{})
  waters[i].anim:init("still",dir.left)
 end
]]
end

function _update60()
 p:update()
 p.camera:update()
 for _,gem in pairs(gems) do gem:update() end
 --for _,enemy in pairs(enemies) do enemy:update() end
 _draw()
end

function _draw()
 cls()
 p.camera:map()
 --for _,enemy in pairs(enemies) do enemy:draw() end
 --for _,water in pairs(waters) do water:draw() end
 for _,gem in pairs(gems) do gem:draw() end
 p:draw()
 spr(62,205,1,0)
 print(sub("0"..gem_count,-2).."'"..gem_total,214,2)

--[[
 print("stage:"..p.anim.current.stage,0,0)
 print("dir:"..p.anim.current.face,82,0)
 print("frame:"..p.anim.current.frame,0,7)
 print("t:"..p.anim.current.tick,82,7)
 print("b:"..p.btn.tick,82,14)
 print("dx:"..p.dx,0,14) print("dy:"..p.dy,30,14)

 print("grounded:"..(p.is.grounded and "t" or "f"),126,0)
 print("jumping:"..(p.is.jumping and "t" or "f"),126,7)
 print("falling:"..(p.is.falling and "t" or "f"),126,14)
 print("sliding:"..(p.is.sliding and "t" or "f"),126,21)

 print("camera:"..p.camera.x..","..p.camera.y,0,21)
 print("slide:"..p.slide.tick,0,28)

 print("x:"..(p.x).." y:"..(p.y),0,35)
--]]
end

function TIC() _update60() end

_init()
-- <TILES>
-- 001:2226686655bb6866226668662226686602222220000026600000000000000266
-- 002:2226686655bb6866226668662226686602222220002660000000000000000266
-- 003:2226686655bb6866226668662226686602222220000000000266266000000000
-- 004:000000002226686655bb68662266686622266866022222200026600026600000
-- 005:00000000000000002226686655bb686622666866222668660222222002266000
-- 006:00000000000000002226686655bb686622666866222668660222222000266260
-- 007:222668662266bebb226668662226686602222220026600000000000026600000
-- 008:222668662266bebb226668662226686602222220000266000000000026600000
-- 009:222668662266bebb226668662226686602222220000000000266266000000000
-- 010:00000000222668662266bebb2266686622266866022222200002660000000266
-- 011:0000000000000000222668662266bebb22666866222668660222222000022660
-- 012:0000000000000000222668662266bebb22666866222668660222222002626600
-- 013:1666686615bb6866d166686611666866d16222209160000091600000d1000000
-- 014:2226686655bbb966226668662226686602222220266000002660000000000000
-- 015:22266c6655b9fff922666c662226686602222220266000002660000000000000
-- 016:2222222255bb9f9b226668662226686602222220026600002660000000000000
-- 017:2226686655bbb966226668662226686602222220026600000000000000026600
-- 018:22266c6655b9fff922666c662226686602222220002626000000000000000000
-- 019:000000002226686622bb9f9b2266686622266866022222200026600000002660
-- 020:2226686622bb9f9b226668662226686602222220000026600000000000266000
-- 021:000000002226686655bbb8662266686622266866022222200002660002660000
-- 022:2226686655bbb966226668662226686602222220000026600000000000266000
-- 023:22266c6655b9fff922666c662226686602222220000026000000000000260000
-- 024:2226686622bb9f9b226668662226686602222220002660000000000002660000
-- 025:2226686622bb9f9b226668662226686602222220026600000000000000026600
-- 026:2226686655b9fff9226668662226686602222220002600000000000000002600
-- 027:2226686655bbb966226668662226686602222220000266000000000000002660
-- 028:222668812266efe12266681d222668110222221d00000219000002190000001d
-- 029:2226686622bb9f9b226668662226686602222220000002660000026600000000
-- 030:22266c6655b9fff922666c662226686602222220000002660000026600000000
-- 031:2226686655bbb966226668662226686602222220000026600000026600000000
-- 032:2226686655bb6866226668662226686602222220002660000000000026600000
-- 033:222668662266bebb226668662226686602222220000266000000000000000266
-- 034:0000000000000000100000000000000010000000d00000001000000010000000
-- 035:1000000000000000000000001000000000000000100000001000000010000000
-- 036:0000000000000000000000010000000000000001000000000000000100000001
-- 037:000000010000000000000000000000010000000d000000010000000100000001
-- 044:11001100df00df00dddddddddddddddd11dd11dd111111117171717117171717
-- 045:0f000f00011001100dd00dd0ddddddddddddddddd11dd11d1111111171717171
-- 046:00000000000000000000000000dd00dddfdddfdddddddddddd11dd1111111111
-- 047:0000000000000000d00df00fdddddddddddddddd1dd11dd11111111171717171
-- 048:b5bb5bbbbbbbbbbb5b5bb5b54b75b75745745747447447444444444444444444
-- 049:000000050000005b0000005b0000005b00000005000000000000000500000000
-- 050:b0000000bb000000b000000000000000b0000000000000000000000000000000
-- 051:555555550505b5b0000500b00000000000000000000000000000000000000000
-- 052:0000000000000000000000000050500005565550065555655555655505555550
-- 053:0000000000002000000666000026e62000066600000025b000055b0000005b00
-- 054:0000004e0000049e000049ee09999e004909e0004000e0004409900004440000
-- 055:4444444444444444444444444444444444444444444444444444444444444444
-- 056:0003330007733a30773333a07333333373333333777333337777777007777700
-- 057:000000000000000000000000000000000000000073a000007733070007700770
-- 058:0000000000000000000000000000000000073a00007733300307733077307700
-- 059:0000000000000000000000000000000010101010f0f0f0f0a0a0a0a0a3a3a3a3
-- 060:3100001310000001000000000000000000000000000000001000000131000013
-- 061:00000000000000000000000000000000011ddfd0011ddfd001111d1022666866
-- 062:00010000001d100001dad1001dddad1001ddd100001d10000001000000000000
-- 063:2268600026beb000226860000222000000000000000000000000000000000000
-- 064:0000000044499e9944999e9944499e9926802680000000000000000005000500
-- 065:0001100044499e9944999e9944499e9902680680000000000050000050500050
-- 066:000dd00044499e9944999e9944499e9920268068000000000000500000505005
-- 067:000ff00044499e9944999e9944499e9926026808000000000000000000500500
-- 068:00000000000000000002200044499e9944999e9944499e990268068055555555
-- 069:000000000006600044499e9944999e9944499e99202680680500500055505505
-- 070:000ee00044499e9944999e9944499e9926026808000000000050000050500505
-- 071:dddaafaa00111311ddaaafaadddaafaa0dddddd0000000000000000000dada00
-- 085:0000000000050000000000000000000000000000000000000000000000000000
-- </TILES>

-- <MAP>
-- 000:737373737373737373737373737373737373737373737373737373737373737300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:733300e30033330033000033000000330000330033330000003333000000337300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:73230000000000000000000000e300000000000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:7300000000000000000000a3935300930000000000000000000000000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:730000000000000000130303030303032300000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:732300000000000000000033330033000000000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:730000000000000000000000000000000000000000000000009300000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:73430000a300000000000000000013030303030303030303030303230000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:730303030303230000000000000000003333000033330000330033000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:733333000033000000000000000000000000000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:732300000000e30000000000000000000000000000000000000000000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:73e30000000000935310000000000000e300000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:73000000130303030303230000004300930000000000000000a300000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:732300000073330000330000130303030303030303030303030303230000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:732300001373000000000000003300003300003333000033000033000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:73000000e373230000000093000000000000000000000000000000000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:7300000000730000130303032300000000000000000000000000000000e3007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 017:732300001373e300000033000000000000000000000000e3000000000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 018:730000001373000000000000000000000000000000000000000000000000137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 019:73e300000073230000001303032300000000000000000000a39353000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:730000001373230000000033000000000000000000000013030303032300137300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:732300000033000000000000000000000000000000000000330033000000007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 022:7383a39300930000000093a300000093a393a3009300009300a300000093a37300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 023:737373737373737373737373737373737373737373737373737373737373737300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <PALETTE>
-- 000:0000001d2b537e255383769cab5236008751ff004d5f574fff77a8ffa300c2c3c700e436ffccaa29adffffec27fff1e8
-- </PALETTE>

-- <COVER>
-- 000:08a000007494648393160f00880077000012ffb0e45445353414055423e2033010000000129f40402000ff00c2000000000f00880078ba2563d1b23592daffff1f8e2c3c7c007815000000004e63e75235ff00d4ffce72f575f43867c9ff778aff001080c1840b0a1c388031a2c58c0b1a3c780132a4c9841b2a5cb88133a6cd8c1b363c00e134a8c1942b4a9c3810400842830a5e0c6930e5a04793396e9cb98337aec5892908ac7913d5a0d0a53362081ab339a2d5a2235a0010e3752cc3a7458614a935d823ddac5bbe347af3b6eccaa3695a15cae53daad5b2035ea40aa57aa95ca639daddbbb3fda9c20c7bf2f5300830b06301060b1630e731b2e207811f2e6cd8713368c4950b4eac38f2f169ca913356ecf8d3356488811f182070a2bb5ccc8153a60cdaf47a68c1bf5b8e0c5b76fd6ad6ad6feecdf9b7fc60ebb97bbe1e2cb87362d0b10bee3cd355a7e9cfc9a3b67eacb9b187e9d3336fce6db278ff7decdbb3eefe4edcb066e2a1c6455f0f3ebcf9f4fbebdf1ccebdf359e7fbfbffff006082a5e7af51620e1880628a0677406b7b0e3801648f06382165861e58a02245e16801a18c1e786f968b128870ea642e980f96882e281d978b2eb830e1403228ee1f733ed8bcd14322e84f185e22f804a1041609d3ad84420934e192fdf8a4ed89463905649bbd392565965a1645e597b120a5ea895679595202628942e7946e1680420a0420c5e9981a9905e20c0010e9989908b9c12c9a4e2027230c0810272d9d8120eb916182e920ae944ef9c7af9086f90866658a1a09e2088af7a8209d8e3a181f90897a69de8f9a5ac9e5a12ac815e172bd10ca2a6ba6ba0b2bffabaaba1b2da3baca2aa9a5c56a02ada8befa0c60b2ce0b2caea2f1faf1e17eaab6aa23b7b2f5fc63b7a94b39a1bc02aad42a600c10b00a6dde20bd67bcd6100ee8b3e69b2ee7b1ea7b4eeab7ea5b7c26b9d200de6bb0e6db0eedbaf200bfadb4feebdf6eb9b2cb8912b02a040e2fb4052c9032ce0f04c0f2cf0f3c9031c92acba4610c595cae91cf1e6cc1f5b60d0c91386985461a58c3f988762174c5469c9ac4f9a887e875ad677d1ec23fac81fece372aa3efc2430d60d0d64ff7e1f1da4f1694f2de4306d4f3db474d25f1d4575d34f5d85ffca5f6db377de53987821d5050980c9d266303668dd853ac8208063088672070820ca2bd0918a0a6f717ffff737720a6fd980a4b2be2b8ba1e587ca5be1ea8fda98fbae8f2ef8bda88fddd17fc03e9d9620eb6b08eb21b0a78e2af8e4a79e2be5e54b9da9f9d90a2b0b24b683cefa35b4b74b6b7ce5b3ee7bfbe42f868a6b6c3e6ea0a6b6eaab5c7bb7c3abcea2f7eabb6c7ab8c34fccf3fbcb3f1df2f1f196c7520d7577367bcff68f10b2c8f29f0078fef69f3efaf8e7ebdeb9f2efbfb04fe09196cd7f5cdb27e6ff9ef90f1125c2135814c62620c6851030860c88d0050800c50620908a0cced14cf27fb9ccd68150920f1e5e6221c2a926a83b9adbd99638c1cb8d8ca2719b412a0158d23399f5e73e2ceedd6a3329af0a90b026abc160ba5613b79dc0b7813bfd401ff7333443f0242773bbdd9c6467b44af56c0d373372a560a863312aec2837544dd8c4a76db9ed5fa979c3cbd80f887e35f9cfec8ae392a81d9490150630fd870470a046d8062091d1fa467cb3659e8813cfbcc0356a749296f0887c15e8f03091526f8dcaa8f3cc22221a4d7b74e81357294ca542b29d5ab42621f889bd4a1d866a0262972db4a3253aa7c443a481182b44051325a2f44a9c1c4d8449fac7350d214e3aa52929298b475ae2f36d9c001d2f7971a852131948da16a7d4992436e0a2144d6a91d337a623a61198ce42dc65233fb6829dfcb783496a53543f443bc7a196279022c62c80d9e4376af2f04fd33c01ac491ac77e723991127b54ac235ffd241d63d766c4cc8ed8458b1a7e137a41c45f01e427c055163ee0ad1c2b9d7e37a3cc12445b8409bf8be698844e8a21b0971532624bb34c3e262fab882d03ef708729c8b96ccc803d23ac45c76051f410a286aa87ed7af6074736c1b7af0bff450f6a61c1c8e4f84bf34ad8494a931ff050568492741143848147416a69a22b39ca4f469732598017412c9aee4f697a2380d09530840f834127b2c6c5b59dae6d8b2c57ea4939b6d51277342885eae338409a01dfa42da8a0670b48d2cefa03a309a96df0b5c841d436f73d44f8aee62b944aca46b2b89dbca66d95695ec2fe2fa309ba2f293452daed94f4b62d4da9655b0646d25fa5bbad8debb04b2015cff6e864b4a543ec43d7bb57f5c43e7fb5ed207b7b0f31eadb41bc35ca24808ac0cf9a37d7a0d580a47b9b1d5aee47f1820c886649f6acd5096c848a61de6869bb8bdc31873d22edada6430a68c4bad4d68e8de36151da0fd9e8b7593c23af86babbf0a34e47a88ff509af7fa30857c2083b3ba49fce7bcbdb282a519e9b847073212c216403f7d1b7006f684f6390650b6873ce994e23814cffbb0b36f3c426fdd8896b00841b9775c5c171578d5c312317360599f5a179816caf9f6ec857c90a6a59315c04e5f8d8d038ecf17199c6bdd8f0e8f8cedb93d2958405642b1997c5f1d7a8594c2269862860aa3ee273930bf6dbbada24a23ea2ba8dbca653cad69a4d6f46c2b585ec1998ca7673b2b188a539ac47ed5559b4b0bd04f7b4fced49e8897cb6e9792177d7f6e0b5295dcb8de37e8aab8dda8d543ecc66ebaa9fbb619d07a952dc168436486c10100b3
-- </COVER>

